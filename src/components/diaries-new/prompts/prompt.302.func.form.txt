아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/diaries-new/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/diaries-new/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/diaries-new/hooks/index.form.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/diaries-new/tests/index.form.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /diaries 페이지가 완전히 로드된 후 일기쓰기버튼을 클릭한 이후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 로컬스토리지 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - 로컬스토리지 모킹하지 말 것.

                3-3) 실패시나리오
                    - 로컬스토리지 모킹하지 말 것.

핵심요구사항) 다음의 조건에 맞게 일기쓰기 폼 등록 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
                - 검증: 이미 설치되어있는 zod를 사용할 것.

            2) 데이터조건
                - 저장소: 로컬스토리지
                - key: diaries
                - value: [{ 
                    id: number,
                    title: string, 
                    content: string, 
                    emotion: enum.ts 경로에 정의된 emotion enum 타입을 import하여 사용할 것.
                    createdAt: string
                }]
            
            3) 유저시나리오(등록하기)
                1. 모든 인풋이 입력되면 등록하기버튼을 활성화 할 것.
                2. 등록하기버튼을 클릭시, 로컬스토리지에 이미 diaries가 존재하는지 확인하고,
                   존재하면 기존의 diaries에 push하되, id를 가장큰 id+1로 설정하여 재등록하고, 
                   존재하지 않으면 새로운 diaries 배열을 생성하여 id는 1로 설정하여 등록할 것.
                3. 등록이 완료되면, 등록완료모달을 노출할 것.
                4. 등록완료모달의 확인을 누르면, 상세페이지로 이동하고, 열려있는 모든 모달을 닫을 것.
                    4-1) 모달조건
                        - 모달 프로바이더 경로: src/commons/providers/modal/modal.provider.tsx
                        - 이미 셋팅되어있는 modal.provider를 사용할 것.
                        - 이미 셋팅되어있는 modal.provider를 수정하지 말 것.

                    4-2) 공통컴포넌트조건
                        - 등록완료모달: <Modal />, variant: 'info', actions: 'single'

                    4-3) 페이지이동조건
                        - commons/constants/url.ts의 페이지URL에 정의된 경로로 이동할 것.
                        - 등록된 id를 사용하여 일기상세페이지로 다이나믹라우팅 할 것.
                        - 일기상세페이지: url.ts에 정의된 일기상세페이지 => /diaries/[id]
