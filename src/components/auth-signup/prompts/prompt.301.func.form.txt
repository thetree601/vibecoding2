아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/auth-signup/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/auth-signup/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/auth-signup/hooks/index.form.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/auth-signup/tests/index.form.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
                - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /auth/signup 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                    - 이메일 중복을 피하기 위해 이메일은 timestamp를 포함하여 항상 등록할 것.
                    - _id가 정상적으로 반환되는지 확인할 것.

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 다음의 조건에 맞게 회원가입 폼 등록 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
                - 검증: 이미 설치되어있는 zod를 사용할 것.
                - API: 이미 설치되어있는 @tanstack/react-query를 사용할 것.

            2) 유저시나리오(회원가입)
                1. 모든 인풋이 입력되면 회원가입버튼을 활성화 할 것.

                2. 회원가입버튼을 누르면 회원가입API를 요청할 것.
                    2-1) API명: createUser
                    2-2) 요청데이터: createUserInput(email, password, name)
                    2-3) 응답데이터: { _id }
                    2-4) zod 검증 조건
                        - email: '@' 포함
                        - password: 영문 + 숫자 포함 8자리 이상
                        - passwordConfirm: password와 동일
                        - name: 최소 1글자 이상

                3. 회원가입에 성공하면, 가입완료모달을 노출하고, 아래의 상황별 지시를 따를 것.

                4. 회원가입에 실패하면, 가입실패모달을 노출하고, 아래의 상황별 지시를 따를 것.
                
                5. 각 상황별 모달의 확인을 누르면, 아래의 지시에 따를 것.
                    5-1) 모달조건
                        - 모달 프로바이더 경로: src/commons/providers/modal/modal.provider.tsx
                        - 이미 셋팅되어있는 modal.provider를 사용할 것.
                        - 이미 셋팅되어있는 modal.provider를 수정하지 말 것.
                        - 모달은 한 번만 보여야 하며, 닫힌 뒤에는 같은 상황에서 다시 나타나지 않도록 할 것.

                    5-2) 공통컴포넌트조건
                        - 가입완료모달: <Modal />, variant: 'info', actions: 'single'
                        - 가입실패모달: <Modal />, variant: 'danger', actions: 'single'

                    5-3) 페이지이동조건
                        - commons/constants/url.ts의 페이지URL에 정의된 경로로 이동할 것.

                        - 가입완료모달:
                            1. '확인' 클릭
                            2. 열려있는 모든 모달을 닫기
                            3. 로그인페이지로 이동 => /auth/login

                        - 가입실패모달:
                            1. '확인' 클릭
                            2. 열려있는 모든 모달을 닫기
