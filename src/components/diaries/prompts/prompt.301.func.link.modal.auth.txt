아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc
            - @05-func.role.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/diaries/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/diaries/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/diaries/hooks/index.link.modal.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/diaries/tests/index.link.modal.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 모든 페이지의 로드 식별 조건은 아래를 따를 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                - 실제데이터를 사용할 것.
                - 단, 로그인데이터는 이미 설정된 전역변수(window.__TEST_BYPASS__)를 사용할 것.
                - Mock데이터 사용하지 말 것.
            
            4) 테스트시나리오(비로그인유저)
                1. /diaries에 접속하여 페이지 로드 확인
                2. 일기쓰기버튼 클릭
                3. 로그인요청모달 노출여부 확인

            5) 테스트시나리오(로그인유저)
                1. /diaries에 접속하여 페이지 로드 확인
                2. 일기쓰기버튼 클릭
                3. 일기쓰기 페이지 모달 노출여부 확인

핵심요구사항) 다음의 조건에 맞게 권한분기기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 권한검사조건
                - 액션GUARD 기능 경로: src/commons/providers/auth/auth.guard.hook.tsx
                - 이미 셋팅되어있는 auth.guard.hook을 사용할 것.
                - 이미 셋팅되어있는 auth.guard.hook을 수정하지 말 것.
            
            2) 상세 구현 내용
                - 일기쓰기버튼: 액션GUARD 연결
