아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://dog.ceo/dog-api/documentation/random
조건-파일경로) 참고할 TSX  파일경로: src/components/pictures/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/pictures/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/pictures/hooks/index.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/pictures/tests/index.binding.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
                - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /pictures 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                    - "dog.ceo"가 포함된 이미지주소가 반환되는지 확인할 것.

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 제공된 API-Docs를 참고하여 사진목록조회 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - API: 이미 설치되어있는 @tanstack/react-query를 사용할 것.

            2) 유저시나리오(사진목록조회)
                1. 페이지에 접속하면, 강아지 목록조회 API를 요청할 것.
                    1-1) API엔드포인트: https://dog.ceo/api/breeds/image/random/6
                    2-2) 요청데이터: 없음
                    2-3) 응답데이터: { message: 강아지 6마리의 사진주소가 들어있는 배열, status }
                
                2. 조회 로딩중에는 스플래시 스크린을 보여줄 것.
                    - 로딩 방식: 스플래시 스크린
                    - 스플래시 스크린 개수: 강아지 개수와 일치하도록 6개의 스플래시 스크린
                    - 스플래시 스크린 디자인
                        - 회색 배경에 두꺼운 흰 세로줄을 우측 30도 기울일 것.
                        - 흰 세로줄은 blur를 줘서 부드럽게 퍼져보이도록 구현할 것.
                        - 이동속도는 빠르게 반복되도록 구현할 것.

                3. 조회에 성공하여 받은 6마리의 강아지 배열을 무한스크롤 형태로 노출할 것.
                
                4. 유저가 무한스크롤을 스크롤하면, 추가적인 강아지를 요청하여 바인딩 할 것.
                    - 스크롤조건: 스크롤이 마지막 2마리의 강아지만 남겨놓은 상태
