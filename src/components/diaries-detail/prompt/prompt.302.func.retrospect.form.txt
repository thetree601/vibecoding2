아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 TSX  파일경로: src/components/diaries-detail/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/diaries-detail/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/diaries-detail/hooks/index.retrospect.form.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/diaries-detail/tests/index.retrospect.form.hook.spec.ts

==============================================

핵심요구사항) 병렬처리 구현을 위한 작업 방식 조건
            - 다른 채팅에서 개발중인 파일을 수정 및 삭제 하지 말 것.
            - 테스트 충돌을 방지하기 위해, 빌드테스트, 전체테스트를 하지 말 것.

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 모든 페이지의 로드 식별 조건은 아래를 따를 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 로컬스토리지 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.
                    
                3-2) 성공시나리오
                    - 로컬스토리지 모킹하지 말 것.

                3-3) 실패시나리오
                    - 로컬스토리지 모킹하지 말 것.
            
            4) 테스트 데이터타입
                - 저장소: 로컬스토리지
                - key: retrospects
                - value: [{ 
                    id: number,
                    content: string, 
                    diaryId: number => 연결된 diaryId를 그대로 저장할 것.
                    createdAt: string,
                }]

            5) 테스트시나리오(로그인유저)
                1. /diaries/[id]에 접속하여 페이지 로드 확인
                2. 하단 유저시나리오에 적절한 테스트시나리오를 생성하여 진행

핵심요구사항) 다음의 조건에 맞게 회고쓰기 폼 등록 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
                - 검증: 이미 설치되어있는 zod를 사용할 것.
            
            2) 유저시나리오(회고 등록하기)
                1. 회고등록 인풋이 입력되면 입력버튼을 활성화 할 것.
                2. 등록하기버튼을 클릭시, 로컬스토리지에 이미 retrospects가 존재하는지 확인하고,
                    존재하면 기존의 retrospects에 push하되, id를 가장큰 id+1로 설정하여 재등록하고, 
                    존재하지 않으면 새로운 retrospects 배열을 생성하여 id는 1로 설정하여 등록할 것.
                3. 등록이 완료되면, 현재 페이지를 새로고침 할 것.
